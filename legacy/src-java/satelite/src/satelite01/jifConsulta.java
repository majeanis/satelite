/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jifConsulta.java
 *
 * Created on 28/07/2010, 02:13:49 PM
 */
package satelite01;


import BE.LBE_Consulta;
import BU.LBU_Consulta;
import BU.LBU_Seguridad;
import hilos.Ejecutor;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import logger.Log;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;

/**
 *
 * @author mzavaleta
 */
public class jifConsulta extends javax.swing.JInternalFrame {

    LBE_Consulta be_Consulta;
    SateliteTableModel model = new SateliteTableModel();
    private Date dtInicio;

    public Date getInicio() {
        return dtInicio;
    }

    public void setInicio(Date dtInicio) {
        this.dtInicio = dtInicio;
    }
    private Date dtFinal;

    public Date getFinal() {
        return dtFinal;
    }

    public double deltaTiempo() {
        long diff = dtFinal.getTime() - dtInicio.getTime();
        return (double) diff / 1000;
    }

    public void setFinal(Date dtFinal) {
        this.dtFinal = dtFinal;
    }

    /** Creates new form jifConsulta */
    public jifConsulta(int idConsulta) {
        initComponents();
        jbEdit.setEnabled(Constantes.UsuarioLogin.validaAccesoAOpcion(LBU_Seguridad.cOPC_MTTO_CONSULTA));

        try {
            be_Consulta = new LBU_Consulta(Constantes.UsuarioLogin.getBDatos()).get(idConsulta);
            setTitle(be_Consulta.getTitulo());
        } catch (Exception ex) {
            Log.error("Error al cargar consulta", ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jToolBar1 = new javax.swing.JToolBar();
        jbtStart = new javax.swing.JButton();
        jbStop = new javax.swing.JButton();
        jbtXls = new javax.swing.JButton();
        jbSaveTxt = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbEdit = new javax.swing.JButton();
        jbtInfo = new javax.swing.JButton();
        jbtResumen = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jbtExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jlMensaje = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jbtStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/clock_play.png"))); // NOI18N
        jbtStart.setToolTipText("Iniciar");
        jbtStart.setFocusable(false);
        jbtStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtStart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtStartActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtStart);

        jbStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/clock_stop.png"))); // NOI18N
        jbStop.setToolTipText("Detener");
        jbStop.setEnabled(false);
        jbStop.setFocusable(false);
        jbStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStopActionPerformed(evt);
            }
        });
        jToolBar1.add(jbStop);

        jbtXls.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/excel.gif"))); // NOI18N
        jbtXls.setToolTipText("Exportar Excel");
        jbtXls.setEnabled(false);
        jbtXls.setFocusable(false);
        jbtXls.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtXls.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtXls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtXlsActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtXls);

        jbSaveTxt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/page_save.png"))); // NOI18N
        jbSaveTxt.setToolTipText("Guardar archivo de texto");
        jbSaveTxt.setEnabled(false);
        jbSaveTxt.setFocusable(false);
        jbSaveTxt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSaveTxt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSaveTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveTxtActionPerformed(evt);
            }
        });
        jToolBar1.add(jbSaveTxt);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/zoom.png"))); // NOI18N
        jButton1.setToolTipText("Ver consulta");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jbEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/report_edit.png"))); // NOI18N
        jbEdit.setToolTipText("Editar consulta");
        jbEdit.setEnabled(false);
        jbEdit.setFocusable(false);
        jbEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditActionPerformed(evt);
            }
        });
        jToolBar1.add(jbEdit);

        jbtInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/information.png"))); // NOI18N
        jbtInfo.setToolTipText("Informacion");
        jbtInfo.setEnabled(false);
        jbtInfo.setFocusable(false);
        jbtInfo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtInfo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtInfoActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtInfo);

        jbtResumen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/sum.png"))); // NOI18N
        jbtResumen.setToolTipText("Resumen de Campos");
        jbtResumen.setFocusable(false);
        jbtResumen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtResumen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtResumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtResumenActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtResumen);
        jToolBar1.add(jSeparator2);

        jbtExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/door_out.png"))); // NOI18N
        jbtExit.setToolTipText("Cerrar");
        jbtExit.setFocusable(false);
        jbtExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtExit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbtExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExitActionPerformed(evt);
            }
        });
        jToolBar1.add(jbtExit);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(model);
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTable1ComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable1ComponentShown(evt);
            }
        });
        jTable1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable1PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setPreferredSize(new java.awt.Dimension(407, 20));

        jProgressBar1.setForeground(new java.awt.Color(102, 102, 255));
        jProgressBar1.setBorderPainted(false);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setStringPainted(true);

        jLabel1.setText("Progreso:");

        jlMensaje.setText("  ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlMensaje)
                .addContainerGap(284, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1)
                .addComponent(jlMensaje))
        );

        jLabel1.getAccessibleContext().setAccessibleName("Progreso");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    protected Thread thread;
    private void jbtStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtStartActionPerformed
        // TODO add your handling code here:
        //String query = be_Consulta.getQuery();
        LBE_Consulta consulta = null;
        String query = "";
        try {
            LBU_Consulta objBU = new LBU_Consulta(Constantes.UsuarioLogin.getBDatos());
            consulta = objBU.get(this.be_Consulta.getId());
            query = consulta.getQuery();
            ArrayList<String> params = consulta.parametros();
            if (params.size() > 0) {
                jdParametros frmParametros =
                        new jdParametros(null,
                        true,
                        params,
                        this.be_Consulta.getId());
                frmParametros.setLocationRelativeTo(this);
                frmParametros.setVisible(true);
                if (!frmParametros.isCancelado()) {
                    jlMensaje.setText("Consulta cancelada");
                    return;
                }
                modelParams = frmParametros.getModel();
                for (int ix = 0; ix < modelParams.getRowCount(); ix++) {
                    String nomParam = (String) modelParams.getValueAt(ix, 0);
                    String valParam = (String) modelParams.getValueAt(ix, 1);
                    query = query.replace("@" + nomParam + "@", valParam);
                    Constantes.propiedades.setProperty("param." + nomParam, valParam);
                }
                frmParametros.dispose();
            }
        } catch (Exception ex) {
        }
        thread = new Thread(
                new Ejecutor(be_Consulta.getId(), query, this));
        thread.start();
        //ejecutaQuery(query);

    }//GEN-LAST:event_jbtStartActionPerformed
    DefaultTableModel modelParams = new DefaultTableModel();
    private void jbtExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExitActionPerformed
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_jbtExitActionPerformed
    TaskExportXls taskExpXls = null;
    private void jbtXlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtXlsActionPerformed
        // TODO add your handling code here:
        //saveXls();
        jbtStart.setEnabled(true);
        jbStop.setEnabled(false);
        jbtExit.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //Instances of javax.swing.SwingWorker are not reusuable, so
        //we create new instances as needed.
        taskExpXls = new TaskExportXls();
        //task.addPropertyChangeListener(this);
        taskExpXls.execute();

    }//GEN-LAST:event_jbtXlsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jdQuery frmQuery = new jdQuery(null, true);
        frmQuery.setQuery(this.be_Consulta.getQuery());
        frmQuery.setLocationRelativeTo(this);
        frmQuery.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStopActionPerformed
        // TODO add your handling code here:
        //thread.interrupt();
        thread.stop();
        jlMensaje.setText("Consulta cancelada");
//        model.setColumnCount(0);
//        model.getDataVector().removeAllElements();
        jbtStart.setEnabled(true);
        jbStop.setEnabled(false);
        jbtExit.setEnabled(true);
    }//GEN-LAST:event_jbStopActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        cerrar();
    }//GEN-LAST:event_formInternalFrameClosing
    TaskExportTxT taskExportarTxt;
    private void jbSaveTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveTxtActionPerformed
        // TODO add your handling code here:
        jdExportTxtCfg frmExpCfg = new jdExportTxtCfg(null, true);
        frmExpCfg.setLocationRelativeTo(this);
        frmExpCfg.setVisible(true);

        if (!frmExpCfg.continuar()) {
            return;
        }
        separador = frmExpCfg.tipo();
        incluyeEncabezado = frmExpCfg.incluyeEncabezado();
        delimitador = frmExpCfg.delimitador();
        jbtStart.setEnabled(true);
        jbStop.setEnabled(false);
        jbtExit.setEnabled(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //Instances of javax.swing.SwingWorker are not reusuable, so
        //we create new instances as needed.
        taskExportarTxt = new TaskExportTxT();
        //task.addPropertyChangeListener(this);
        taskExportarTxt.execute();
    }//GEN-LAST:event_jbSaveTxtActionPerformed

    private void jbEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditActionPerformed
        // TODO add your handling code here:
        //Se debe validar que tenga acceso a Mto de Consultas
        jdMttoConsulta mttoConsulta = new jdMttoConsulta(null, true, be_Consulta.getId());
        //mttoConsulta.setQuery(this.be_Consulta.getQuery());
        mttoConsulta.setLocationRelativeTo(this);
        mttoConsulta.setVisible(true);
    }//GEN-LAST:event_jbEditActionPerformed

    private void jTable1ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentResized
        // TODO add your handling code here:}
        DefaultTableColumnModel modelColumn = (DefaultTableColumnModel) jTable1.getColumnModel();
        StringBuilder sb = new StringBuilder();
        for (int ix = 0; ix < modelColumn.getColumnCount(); ix++) {
            int width = modelColumn.getColumn(ix).getPreferredWidth();
            sb.append(width);
            sb.append(",");
        }
        int id = this.be_Consulta.getId();
        Constantes.propiedades.setProperty("consulta." + String.valueOf(id) + ".cols", sb.toString());
    }//GEN-LAST:event_jTable1ComponentResized

    private void jTable1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable1ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1ComponentShown

    private void jTable1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1PropertyChange

    private void jbtInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtInfoActionPerformed
        // TODO add your handling code here:
        jdInfo frmInfo =
                new jdInfo(null,
                true,
                this.modelParams, this.model);
        frmInfo.setDatos(dtInicio, dtFinal, deltaTiempo(),
                this.model.getRowCount(), this.jTable1.getSelectedRowCount());
        frmInfo.setLocationRelativeTo(this);
        frmInfo.setVisible(true);

    }//GEN-LAST:event_jbtInfoActionPerformed

    private void jbtResumenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtResumenActionPerformed
        // TODO add your handling code here:
        jdResumen frmRes =
                new jdResumen(null,
                true,
                this.model, jTable1.getSelectedRows());
        frmRes.setLocationRelativeTo(this);
        frmRes.setVisible(true);

    }//GEN-LAST:event_jbtResumenActionPerformed
    private void cerrar() {
        this.dispose();
    }

    private HSSFSheet genHdrXls(TableModel model, HSSFWorkbook wb, int numHoja) {
        HSSFSheet sheet = wb.createSheet("Hoja" + String.valueOf(numHoja));
        //Se agrega los encabezados
        Row row = sheet.createRow(0);
        int numCols = model.getColumnCount();
        CellStyle styleHeader = wb.createCellStyle();
        styleHeader.setAlignment(CellStyle.ALIGN_CENTER);
        styleHeader.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleHeader.setFillForegroundColor(IndexedColors.AQUA.getIndex());
        for (int i = 0; i < numCols; i++) {
            Cell cell = row.createCell(i);
            cell.setCellValue(model.getColumnName(i));
            cell.setCellStyle(styleHeader);
        }
        return sheet;
    }

    public void marcaInicio(String mensaje) {
        jlMensaje.setText(mensaje);
        jbtStart.setEnabled(false);
        jbtExit.setEnabled(false);
        jbtXls.setEnabled(false);
        jbtInfo.setEnabled(false);
        jbSaveTxt.setEnabled(false);
        jbStop.setEnabled(true);
    }

    public void marcaFin(String mensaje) {
        jlMensaje.setText(mensaje);
        jbtStart.setEnabled(true);
        jbtExit.setEnabled(true);
        jbtXls.setEnabled(true);
        jbtInfo.setEnabled(true);
        jbSaveTxt.setEnabled(true);
        jbStop.setEnabled(false);
    }

    public void marcaError(String mensaje) {
        jlMensaje.setText(mensaje);
        jbtStart.setEnabled(true);
        jbtExit.setEnabled(true);
        jbtXls.setEnabled(false);
        jbtInfo.setEnabled(false);
        jbSaveTxt.setEnabled(false);
        jbStop.setEnabled(false);
    }

    class TaskExportTxT extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */

        @Override
        public Void doInBackground() {
            //Initialize progress property.
            jlMensaje.setText("");
            jProgressBar1.setMinimum(0);
            jProgressBar1.setString(null);
            jbSaveTxt.setEnabled(false);
            jbtStart.setEnabled(false);
            jbtXls.setEnabled(false);
            String sSeparador = "";
            String file = be_Consulta.getTitulo();

            JFileChooser jFileChooser = new JFileChooser(new File(file));
            int rpta = 0;
            boolean rptaFile = false;
            File selFile = null;
            while (!rptaFile) {
                if (separador == jdExportTxtCfg.SEPARADOR_COMA) {
                    sSeparador = ",";
                    jFileChooser.addChoosableFileFilter(new MyFilter(MyFilter.cTIPO_CSV));
                } else if (separador == jdExportTxtCfg.SEPARADOR_TAB) {
                    sSeparador = "\t";
                    jFileChooser.addChoosableFileFilter(new MyFilter(MyFilter.cTIPO_TSV));
                }
                rpta = jFileChooser.showSaveDialog(null);
                if (rpta != JFileChooser.APPROVE_OPTION) {
                    return null;
                }
                selFile = jFileChooser.getSelectedFile();
                javax.swing.filechooser.FileFilter filter = jFileChooser.getFileFilter();
                if (separador == jdExportTxtCfg.SEPARADOR_COMA) {
                    if (filter.getClass().toString().toUpperCase().endsWith("MYFILTER")) {
                        if (!selFile.getAbsolutePath().toUpperCase().endsWith(".CSV")) {
                            file = selFile.getAbsolutePath() + ".csv";
                        } else {
                            file = selFile.getAbsolutePath();
                        }
                    } else {
                        file = selFile.getAbsolutePath();
                    }
                } else {
                    if (separador == jdExportTxtCfg.SEPARADOR_TAB) {
                        if (filter.getClass().toString().toUpperCase().endsWith("MYFILTER")) {
                            if (!selFile.getAbsolutePath().toUpperCase().endsWith(".TSV")) {
                                file = selFile.getAbsolutePath() + ".tsv";
                            } else {
                                file = selFile.getAbsolutePath();
                            }
                        } else {
                            file = selFile.getAbsolutePath();
                        }
                    }
                }
                selFile = new File(file);

                if (selFile.exists()) {
                    rpta = JOptionPane.showConfirmDialog(null,
                            "El archivo: " + selFile.getName()
                            + " ya existe, ¿Desea sobre-escribirlo?", "Confirmar...", JOptionPane.YES_NO_OPTION);
                    if (rpta == JOptionPane.YES_OPTION) {
                        rptaFile = true;
                    }
                } else {
                    rptaFile = true;
                }
            }
            int contRegs = 0;
            Date inicio = new Date();
            try {
                FileOutputStream out = new FileOutputStream(selFile);
                //DataOutputStream ps = new DataOutputStream(out);
                int numCols = model.getColumnCount();
                if (incluyeEncabezado) {
                    StringBuilder sbLinea = new StringBuilder();
                    String campo = "";
                    for (int i = 0; i < numCols; i++) {
                        if (sbLinea.toString().equals("")) {
                            campo = model.getColumnName(i).replaceAll("\"", "\"\"");
                            sbLinea.append(delimitador);
                            sbLinea.append(campo);
                            sbLinea.append(delimitador);
                        } else {
                            if (model.getColumnName(i) == null) {
                                sbLinea.append(sSeparador);
                                sbLinea.append(delimitador);
                                sbLinea.append(delimitador);
                            } else {
                                campo = model.getColumnName(i).replaceAll("\"", "\"\"");
                                sbLinea.append(sSeparador);
                                sbLinea.append(delimitador);
                                sbLinea.append(campo);
                                sbLinea.append(delimitador);
                            }
                        }
                    }
                    sbLinea.append("\r\n");
                    out.write(sbLinea.toString().getBytes("ISO-8859-1"));
                }
                jProgressBar1.setMaximum(model.getRowCount());
                for (int i = 0; i < model.getRowCount(); i++) {
                    StringBuilder sbLinea = new StringBuilder();
                    for (int j = 0; j < numCols; j++) {
                        if (sbLinea.toString().equals("")) {
                            sbLinea.append(getField(model.getValueAt(i, j)));
                        } else {
                            if (model.getValueAt(i, j) == null) {
                                sbLinea.append(sSeparador);
                            } else {
                                sbLinea.append(sSeparador);
                                sbLinea.append(getField(model.getValueAt(i, j)));
                            }
                        }
                    }
                    sbLinea.append("\r\n");
                    contRegs++;
                    out.write(sbLinea.toString().getBytes("ISO-8859-1"));
                    jProgressBar1.setValue(contRegs);
                }
                out.close();
                Date fin = new Date();
                double delta = (double) (fin.getTime() - inicio.getTime()) / 1000;
                jlMensaje.setText("Se exportó satisfactoriamente " + Integer.toString(contRegs)
                        + " registros, en " + Double.toString(delta) + " segundos");
                rpta = JOptionPane.showConfirmDialog(null,
                        "Archivo generado OK, ¿Desea abrirlo?", "Confirmar...", JOptionPane.YES_NO_OPTION);
                if (rpta == JOptionPane.YES_OPTION) {
                    file = selFile.getAbsolutePath();
                    Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file);
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (OutOfMemoryError ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(), "Error de memoria", JOptionPane.ERROR_MESSAGE);
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            jbSaveTxt.setEnabled(true);
            jbtStart.setEnabled(true);
            jbtXls.setEnabled(true);
            setCursor(null);
        }
    }

    private String getField(Object obj) {
        String className = obj.getClass().getName();
        String campo = obj.toString();
        boolean tieneDelimitador = true;
        if (className.endsWith("Double") || className.endsWith("Integer")
                || className.endsWith("Long") || className.endsWith("BigDecimal")
                || className.endsWith("Date")) {
            tieneDelimitador = false;
        } else {
            if (delimitador.equals("\"")) {
                campo = campo.replaceAll("\"", "\"\"");
            }
        }
        StringBuilder sbRpta = new StringBuilder();
        if (tieneDelimitador) {
            sbRpta.append(delimitador);
        }
        sbRpta.append(campo);
        if (tieneDelimitador) {
            sbRpta.append(delimitador);
        }
        return sbRpta.toString();
    }

    class TaskExportXls extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */

        @Override
        public Void doInBackground() {
            //Initialize progress property.
            jlMensaje.setText("");
            jProgressBar1.setMinimum(0);
            jProgressBar1.setString(null);
            jbSaveTxt.setEnabled(false);
            jbtStart.setEnabled(false);
            jbtXls.setEnabled(false);
            String file = be_Consulta.getTitulo();

            JFileChooser jFileChooser = new JFileChooser(new File(file));
            int rpta = 0;
            boolean rptaFile = false;
            File selFile = null;
            while (!rptaFile) {
                jFileChooser.addChoosableFileFilter(new MyFilter(MyFilter.cTIPO_XLS));
                rpta = jFileChooser.showSaveDialog(null);
                if (rpta != JFileChooser.APPROVE_OPTION) {
                    return null;
                }
                selFile = jFileChooser.getSelectedFile();
                javax.swing.filechooser.FileFilter filter = jFileChooser.getFileFilter();
                if (filter.getClass().toString().toUpperCase().endsWith("MYFILTER")) {
                    if (!selFile.getAbsolutePath().toUpperCase().endsWith(".XLS")) {
                        file = selFile.getAbsolutePath() + ".xls";
                    } else {
                        file = selFile.getAbsolutePath();
                    }
                } else {
                    file = selFile.getAbsolutePath();
                }
                selFile = new File(file);

                if (selFile.exists()) {
                    rpta = JOptionPane.showConfirmDialog(null,
                            "El archivo: " + selFile.getName()
                            + " ya existe, ¿Desea sobre-escribirlo?", "Confirmar...", JOptionPane.YES_NO_OPTION);
                    if (rpta == JOptionPane.YES_OPTION) {
                        rptaFile = true;
                    }
                } else {
                    rptaFile = true;
                }
            }
            int contRegs = 1;
            int contRegsTot = 0;
            Date inicio = new Date();
            HSSFWorkbook wb = new HSSFWorkbook();
            int numHojas = 1;
            HSSFSheet sheet = genHdrXls(model, wb, numHojas);
            file = file.replace(":", "_");
            try {
                FileOutputStream out = new FileOutputStream(selFile);
                Row row;
                Cell cell;
                int numCols = model.getColumnCount();
                jProgressBar1.setMaximum(model.getRowCount());
                //Se agrega los detalle
                for (int i = 0; i < model.getRowCount(); i++) {
                    if (contRegs >= 65535) {
                        numHojas++;
                        sheet = genHdrXls(model, wb, numHojas);
                        contRegs = 1;
                    }
                    row = sheet.createRow((int) contRegs);
                    for (int j = 0; j < numCols; j++) {
                        cell = row.createCell(j);
                        if (model.getValueAt(i, j) == null) {
                            cell.setCellValue((String) model.getValueAt(i, j));
                            //break;
                        } else {
                            Class<?> clase = model.getValueAt(i, j).getClass();
                            if (clase.getName().endsWith("Double")) {
                                cell.setCellValue((Double) model.getValueAt(i, j));
                            } else if (clase.getName().endsWith("Integer")) {
                                cell.setCellValue((Integer) model.getValueAt(i, j));
                            } else if (clase.getName().endsWith("Long")) {
                                cell.setCellValue((Long) model.getValueAt(i, j));
                            } else if (clase.getName().endsWith("BigDecimal")) {
                                BigDecimal bigDecimal = (BigDecimal) model.getValueAt(i, j);
                                cell.setCellValue(bigDecimal.doubleValue());
                            } else if (clase.getName().endsWith("String")) {
                                cell.setCellValue((String) model.getValueAt(i, j));
                            } else //if (clase.getName().endsWith("BigDecimal"))
                            //    cell.setCellValue(() model.getValueAt(i, j));
                            //else
                            {
                                cell.setCellValue(model.getValueAt(i, j).toString());
                            }
                        }
                    }
                    contRegs++;
                    contRegsTot++;
                    jProgressBar1.setValue(contRegsTot);
                }
                wb.write(out);
                out.close();
                Date fin = new Date();
                double delta = (double) (fin.getTime() - inicio.getTime()) / 1000;
                jlMensaje.setText("Se exportó satisfactoriamente " + Integer.toString(contRegsTot)
                        + " registros, en " + Double.toString(delta) + " segundos");

                rpta = JOptionPane.showConfirmDialog(null,
                        "Archivo generado OK, ¿Desea abrirlo?", "Confirmar...", JOptionPane.YES_NO_OPTION);
                if (rpta == JOptionPane.YES_OPTION) {
                    file = selFile.getAbsolutePath();
                    Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + file);
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                        ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            } catch (OutOfMemoryError ex) {
                jlMensaje.setText("Error en exportar");
                JOptionPane.showMessageDialog(null, "Hoja: " + Integer.toString(numHojas)
                        + " , Registro: " + Long.toString(contRegs) + " : "
                        + ex.getMessage(), "Error de Memoria", JOptionPane.ERROR_MESSAGE);

            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            jbSaveTxt.setEnabled(true);
            jbtStart.setEnabled(true);
            jbtXls.setEnabled(true);
            setCursor(null);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator2;
    public javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbEdit;
    private javax.swing.JButton jbSaveTxt;
    private javax.swing.JButton jbStop;
    private javax.swing.JButton jbtExit;
    private javax.swing.JButton jbtInfo;
    private javax.swing.JButton jbtResumen;
    private javax.swing.JButton jbtStart;
    private javax.swing.JButton jbtXls;
    public javax.swing.JLabel jlMensaje;
    // End of variables declaration//GEN-END:variables
    private int separador;
    private boolean incluyeEncabezado;
    private String delimitador;
}
