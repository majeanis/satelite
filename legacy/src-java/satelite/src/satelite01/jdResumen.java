/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jdResumen.java
 *
 * Created on 23/07/2011, 12:13:50 PM
 */
package satelite01;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import logger.Log;

/**
 *
 * @author mzavaleta
 */
public class jdResumen extends javax.swing.JDialog {

    private DefaultTableModel model = null;
    private int[] seleccionados;

    /** Creates new form jdResumen */
    public jdResumen(java.awt.Frame parent, boolean modal,
            DefaultTableModel model, int[] seleccionados) {
        super(parent, modal);
        initComponents();
        this.model = model;
        this.seleccionados = seleccionados;
        jchkSeleccionados.setText("Registros seleccionados (" + Integer.toString(seleccionados.length) + ")");
        jcbCampos.addItem("Seleccionar campo");
        for (int ix = 1; ix <= model.getColumnCount(); ix++) {
            jcbCampos.addItem(model.getColumnName(ix - 1));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar3 = new javax.swing.JToolBar();
        jbOut = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jcbCampos = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jtfContador = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfMinimo = new javax.swing.JTextField();
        jtfMaximo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jtfSuma = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jtfPromedio = new javax.swing.JTextField();
        jchkSeleccionados = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resumen de campos");
        setResizable(false);

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);

        jbOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/satelite01/icons/door_out.png"))); // NOI18N
        jbOut.setToolTipText("Cerrar");
        jbOut.setFocusable(false);
        jbOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOutActionPerformed(evt);
            }
        });
        jToolBar3.add(jbOut);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setText("Campo:");

        jcbCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCamposActionPerformed(evt);
            }
        });

        jLabel7.setText("Contador");

        jtfContador.setEditable(false);
        jtfContador.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel8.setText("MÃ­nimo");

        jtfMinimo.setEditable(false);
        jtfMinimo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jtfMaximo.setEditable(false);
        jtfMaximo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel9.setText("Maximo");

        jLabel10.setText("Suma");

        jtfSuma.setEditable(false);
        jtfSuma.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel11.setText("Promedio");

        jtfPromedio.setEditable(false);
        jtfPromedio.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jchkSeleccionados.setText("Registros seleccionados");
        jchkSeleccionados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jchkSeleccionadosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfSuma, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfPromedio, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfContador, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfMaximo, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jchkSeleccionados)
                            .addComponent(jcbCampos, 0, 309, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jchkSeleccionados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfContador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jtfMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(jtfMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jtfSuma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtfPromedio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addGap(286, 286, 286))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOutActionPerformed
        // TODO add your handling code here:
        this.dispose();
}//GEN-LAST:event_jbOutActionPerformed

    private void cargaDatos() {
        int ix = jcbCampos.getSelectedIndex();
        double sumaD = 0;
        double minimoD = 0;
        double maximoD = 0;


        long sumaL = 0;
        long minimoL = 0;
        long maximoL = 0;

        Date minimoF = null;
        Date maximoF = null;
        try {
            minimoF = new SimpleDateFormat("yyyyMMdd").parse("29991231");
            maximoF = new SimpleDateFormat("yyyyMMdd").parse("19000101");
        } catch (ParseException ex) {
            Log.error("Error al setear fechas", ex);
        }
        int contador = 0;
        double promedio = 0;
        DecimalFormat df = new DecimalFormat("##,###,###,###,##0.00");
        jtfSuma.setText("");
        jtfContador.setText("");
        jtfMaximo.setText("");
        jtfMinimo.setText("");
        jtfPromedio.setText("");
        try {
            if (ix > 0) {
                boolean esDoble = false;
                boolean esLong = false;
                boolean esInteger = false;
                boolean esFecha = false;
                boolean esBigDecimal = false;
                String className = model.getColumnClass(ix - 1).getName();
                if (className.endsWith("Double")) {
                    esDoble = true;
                } else if (className.endsWith("BigDecimal")) {
                    esBigDecimal = true;
                } else if (className.endsWith("Long")) {
                    esLong = true;
                } else if (className.endsWith("Integer")) {
                    esInteger = true;
                } else if (className.endsWith("Date")) {
                    esFecha = true;
                }
                int maxRows = 0;
                if (jchkSeleccionados.isSelected()) {
                    maxRows = this.seleccionados.length;
                } else {
                    maxRows = this.model.getRowCount();
                }
                for (int iy = 0; iy < maxRows; iy++) {
                    int iz;
                    if (jchkSeleccionados.isSelected()) {
                        iz = this.seleccionados[iy];
                    } else {
                        iz = iy;
                    }
                    Object obj = model.getValueAt(iz, ix - 1);
                    if (esDoble || esBigDecimal) {
                        if (obj != null) {
                            className = obj.getClass().getName();
                            if (className.endsWith("Double")) {
                                esDoble = true;
                            } else if (className.endsWith("BigDecimal")) {
                                esBigDecimal = true;
                            }
                            double valor;
                            if (esBigDecimal) {
                                BigDecimal bd = (BigDecimal) obj;
                                valor = bd.doubleValue();
                            } else {
                                valor = (Double) obj;
                            }
                            sumaD = sumaD + valor;
                            if (iy == 0) {
                                minimoD = valor;
                                maximoD = valor;
                            }
                            if (valor < minimoD) {
                                minimoD = valor;
                            }
                            if (valor > maximoD) {
                                maximoD = valor;
                            }
                        }
                    } else if (esLong || esInteger) {
                        if (obj != null) {
                            className = obj.getClass().getName();
                            if (className.endsWith("Long")) {
                                esLong = true;
                            } else if (className.endsWith("Integer")) {
                                esInteger = true;
                            }
                            long valor = 0;
                            if (esLong) {
                                valor = (Long) obj;
                            } else if (esInteger) {
                                int tmp = (Integer) obj;
                                valor = tmp;
                            }
                            sumaL = sumaL + valor;
                            if (iy == 0) {
                                minimoL = valor;
                                maximoL = valor;
                            }
                            if (valor < minimoL) {
                                minimoL = valor;
                            }
                            if (valor > maximoL) {
                                maximoL = valor;
                            }
                        }
                    } else if (esFecha) {
                        if (obj != null) {
                            Date valor = (Date) obj;
                            if (iy == 0) {
                                minimoF = valor;
                                maximoF = valor;
                            }
                            if (valor.before(minimoF)) {
                                minimoF = valor;
                            }
                            if (valor.after(maximoF)) {
                                maximoF = valor;
                            }
                        }
                    }
                    if (obj != null) {
                        contador++;
                    }
                }
                if (maxRows > 0) {
                    if (esDoble || esBigDecimal) {
                        if (contador != 0) {
                            promedio = sumaD / contador;
                        }
                        jtfSuma.setText(df.format(sumaD));
                        jtfMaximo.setText(df.format(maximoD));
                        jtfMinimo.setText(df.format(minimoD));
                        jtfPromedio.setText(df.format(promedio));
                    } else if (esLong || esInteger) {
                        if (contador != 0) {
                            promedio = (double) sumaL / contador;
                        }
                        jtfSuma.setText(df.format(sumaL));
                        jtfMaximo.setText(df.format(maximoL));
                        jtfMinimo.setText(df.format(minimoL));
                        jtfPromedio.setText(df.format(promedio));
                    } else if (esFecha) {
                        jtfMaximo.setText(new SimpleDateFormat("dd-MM-yyyy").format(maximoF));
                        jtfMinimo.setText(new SimpleDateFormat("dd-MM-yyyy").format(minimoF));
                    }
                }
                jtfContador.setText(df.format(contador));
            }
        } catch (Exception ex) {
            Log.error("Error al mostrar resumen", ex);
        }
    }
    private void jcbCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCamposActionPerformed
        // TODO add your handling code here:
        cargaDatos();
    }//GEN-LAST:event_jcbCamposActionPerformed

    private void jchkSeleccionadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jchkSeleccionadosActionPerformed
        // TODO add your handling code here:
        cargaDatos();
    }//GEN-LAST:event_jchkSeleccionadosActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JButton jbOut;
    private javax.swing.JComboBox jcbCampos;
    private javax.swing.JCheckBox jchkSeleccionados;
    private javax.swing.JTextField jtfContador;
    private javax.swing.JTextField jtfMaximo;
    private javax.swing.JTextField jtfMinimo;
    private javax.swing.JTextField jtfPromedio;
    private javax.swing.JTextField jtfSuma;
    // End of variables declaration//GEN-END:variables
}
